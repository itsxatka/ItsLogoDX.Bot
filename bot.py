import asyncio
import nest_asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶®
TOKEN = "7784967189:AAEmjp6czEFkveSeFoXAoGpibg1uM_n-4d0"

# ‡¶®‡¶æ‡¶Æ‡¶ï‡ßá ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤‡¶ø‡¶∂ ‡¶¨‡¶æ‡¶®‡¶æ‡ßü
def stylish_name(name):
    prefix = "·∂¶∆¨À¢‚ÉùüéÄ"
    suffix = "Ô∑Ω"

    if len(name) == 0:
        return ""

    first_char = name[0]
    if 'A' <= first_char.upper() <= 'Z':
        regional = chr(0x1F1E6 + ord(first_char.upper()) - ord('A')) + '\u200C'
    else:
        regional = first_char

    rest = name[1:]

    small_caps = {
        'A': '·¥Ä', 'B': ' ô', 'C': '·¥Ñ', 'D': '·¥Ö', 'E': '·¥á', 'F': '“ì', 'G': '…¢',
        'H': ' ú', 'I': '…™', 'J': '·¥ä', 'K': '·¥ã', 'L': ' ü', 'M': '·¥ç', 'N': '…¥',
        'O': '·¥è', 'P': '·¥ò', 'Q': '«´', 'R': ' Ä', 'S': 's', 'T': '·¥õ', 'U': '·¥ú',
        'V': '·¥†', 'W': '·¥°', 'X': 'x', 'Y': ' è', 'Z': '·¥¢'
    }

    rest_styled = ''.join([small_caps.get(c.upper(), c) for c in rest])
    styled = prefix + regional + rest_styled + suffix

    return styled

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡ßá‡¶≤‡ßá ‡¶¨‡¶ü ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá
async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    styled = stylish_name(name)
    await update.message.reply_text(styled)

# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶Ö‡¶Ç‡¶∂
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))

    print("Bot is running...")
    await app.run_polling()

# Pydroid3 ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá
nest_asyncio.apply()
asyncio.run(main())
